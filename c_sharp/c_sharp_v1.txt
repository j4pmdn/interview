======c-sharp==========
Trong C#, namespace được sử dụng để tổ chức và nhóm các class, iterface, cấu trúc, enum và delegate lại với nhau, giúp tránh xung đột tên khi 
làm việc với các dự án lớn hoặc tích hợp thư viện bên ngoài.

internal -> truy cập bất cứ trong project

Kiểu dữ liệu trong .Net
Có 2 loại KDL gồm value types và reference types
 -> value types: khi khai báo 1 biến thì bản thân nó sẽ chứa luôn KDL, ko cần new để cấp phát vùng nhớ
 -> reference types: khi khai báo 1 biến thì biến đó chỉ là 1 tham chiếu đến đối tượng -> nếu muốn dùng thì phải dùng toán tử new để cấp phát
 
KDL object
 string -> immutable -> ko thể thay đổi chuỗi ban đầu -> nếu muốn thay đổi chuỗi thì dùng StringBuilder tối ưu hiệu năng hơn string gán chuỗi	
 dynamic -> chỉ kiểm tra khi chạy chương trình(runtime), ko kiểm tra ở biên dịch


.NET Collection
	Collection cho phép chứa nhiều object bên trong.
	Khác với array, collection cho phép thêm/bớt các thành phần.
	List, LinkedList dùng để chứa một danh sách.
	Dictionary chứa dữ liệu theo kiểu key/value.
	Queue và Stack cung cấp thêm các hàm để làm việc với cấu trúc dữ liệu hàng đợi hoặc ngăn xếp.
	
Lambda trong C#
	Biểu thức lambda là biểu thức sử dụng toán tử lambda
	Nếu chỉ có một tham số thì ta có thể bỏ cặp dấu ngoặc tròn ()
	Expression lambda có kiểu Func
	Statement lambda có kiểu Action

Lambda cho phép ta truyền các biếu thức cho các hàm, lưu lại trong có biến... giúp viết code mềm dẻo và gọn gàng hơn, 
lambda được dùng nhiều với LINQ hoặc Entity Framework

LINQ - Language Integrated Query là một tập các công nghệ trên .NET cho phép viết trực tiếp các câu truy vấn ngay trong mã nguồn chương trình.
Ưu điểm của LINQ là cho phép viết lệnh truy vấn ngắn gọn, dễ dàng, sử dụng cùng một cú pháp cho tất cả các dạng nguồn dữ liệu khác nhau, 
	có thể phát hiện lỗi ngay khi biên dịch hoặc lỗi khi cấu trúc nguồn dữ liệu thay đổi.
	
Đa hình
 Dùng từ khóa virtual để cho phép một hàm có thể được override lại trong lớp thừa kế.
 Dùng từ khóa override khi bạn muốn nạp chồng một phương thức, nếu thiếu từ khóa này, method của bạn sẽ là một method mới và không được tự động gọi nếu bạn gọi thông qua một biến thuộc lớp cha.
 Dùng từ khóa sealed nếu không muốn các lớp con override.

Từ khóa static.
Ta có thể khai báo:
static field
static method
static constructor 
static class 

Ta cũng học cách viết các extension method và làm quen với design pattern thông qua Singleton, với eager loading và lazy loading.
Ngoài ra, clip này cũng giúp các bạn làm quen với lock, giúp kiểm soát các critial section trong lập trình multi thread.

Tóm tắt:
1. Biến static gắn liền với class chứa nó và được tạo duy nhất 1 lần, tồn tại đến khi kết thúc chương trình
Biến không phải static sẽ gắn liền với object
2. Khi khai báo hàm là static, chỉ có thể truy cập vào biến static (vì hàm static gắn liền với class, không gắn với một object cụ thể, trong khi biến bình thường gắn liền với object cụ thể)
3. Constructor static được gọi tự động khi class được sử dụng lần đầu tiên
4. Class static chỉ chứa các thành phần là static (hạn chế dùng, thường dùng khi viết extension method - là các method làm việc trên kiểu dữ liệu nào đó)
5. Tạo extension method bằng cách: tạo một lớp static, tạo 1 hàm static, tham số nhận vào là this + kiểu dữ liệu + tên biến

Reference type
6. Phải gán giá trị cho kiểu reference type nếu nó không nullable (dùng require hoặc gán giá trị mặc định)

Singleton
7. Vấn đề khi sử dụng static: khó kiểm soát vì có thể truy cập từ bất kì đâu trong chương trình, nếu thay đổi giá trị của nó sẽ ảnh hưởng đến tất cả những nơi sử dụng biến static này, dùng singleton pattern để khắc phục
8. Singleton pattern giúp kiểm soát được: quản lý vòng đời, kiểm soát truy cập, sửa đổi, ...
9. Nội dung: Thay vì cho người dùng truy cập thẳng vào biến static, thì ta bắt buộc phải thông qua 1 lớp đặc biệt, gọi là singleton
10. Dùng singleton phải kiểm soát truy cập đồng thời từ nhiều thread 
 Dùng lock: Chỉ cho duy nhất 1 thread chạy vào vùng lock, nếu đang có thread chạy vào mà có thread chạy đến thì thread mới chạy đến phải chờ thread kia chạy xong vùng lock 
 
Hướng dẫn cách khai báo và sử dụng interface
Nên dùng interface như thế nào
So sánh interface và abstract class

Hỏi đáp:
Q: Abstract class và interface khác nhau thế nào?
A: Abstract class là một lớp được tạo ra với mục đích trở thành một lớp cha trong cây thừa kế, tức là khi có nhiều lớp với những đặc điểm tương tự, có thể xếp chung vào một loại, 
khi đó việc tạo ra một lớp chứa những đặc điểm chung và cho các lớp con thừa kế từ đó sẽ giúp bạn sử dụng lại code, dễ quản lý, áp dụng đa hình... 
Lớp cha có thể không đủ cụ thể để hiện thực hóa toàn bộ, do vậy một số, thậm chí có thể toàn bộ các phương thức sẽ chỉ là trừu tượng.
Trong khi đó, interface là một danh mục các phương thức, thuộc tính... mà một lớp cần hỗ trợ. Mỗi interface được coi là một contract, hoặc một "chuẩn" 
để các lớp implement nó hỗ trợ. Hãy nghĩ đến ví dụ cổng sạc của điện thoại, USB-C là một chuẩn, nó không phải là một thứ cụ thể mà chỉ là danh sách các thứ mà 
một chiếc điện thoại phải tuân theo nếu muốn hỗ trợ USB-C: định dạng cổng, chân, điện áp, tín hiệu, quy trình kết nối... nhà sản xuất điện thoại chỉ cần theo đúng 
từng mục trong quy định đó để làm ra một chiếc điện thoại hỗ trợ chuẩn này. Trong trường hợp này USB-C chính là một interface, và một dòng điện thoại hỗ trợ USB-C là một class 
có implement interface này, mỗi chiếc điện thoại là một object thuộc class, và tất nhiên bạn hoàn toàn có thể sạc hoặc copy dữ liệu dùng chuẩn USB-C với chiếc điện thoại đó, 
dù nhà sản xuất cáp và điện thoại có thể chưa từng làm việc trực tiếp với nhau.

Q: Vậy nhưng thay vì dùng interface, em vẫn có thể sử dụng abstract class?
A: Đúng là như vậy, em có thể tạo một danh sách chức năng cần hỗ trợ trong một abstract class thay vì trong một interface, và tất nhiên một lớp thừa kế từ class này 
cũng phải implement các phương thức đó.
Nhưng điều này dẫn đến cách sử dụng sai mục đích, và em sẽ gặp khó khăn khi sử dụng về sau. Em sẽ làm thế nào để một class hỗ trợ 2 (hay nhiều hơn) 
"danh sách chức năng cần hỗ trợ"? Không được! Vì một lớp chỉ có thể thừa kế từ một lớp cha. Khi người khác đọc code cũng vậy, vì tất cả đã cùng quy ước sử dụng interface 
để định nghĩa các contract, họ chắc chắn sẽ gặp khó khăn khi đọc code của em. Code chạy được, code chạy tốt, và thậm chí là code dễ bảo trì là những câu chuyện khác nhau.
Anh công nhân ngoài công trường có thể đội mũ bảo hiểm khi đi xe máy khi làm việc không? Tất nhiên là được, nó cũng có thể bảo vệ, nhưng em có thấy nó kỳ cục không?

Q: Có cách nào nói ngắn gọn hơn không?
A: 
Khi có lớp B thừa kế từ lớp A, ta nói B là con A, một object B cũng chính là một object A.
Khi có lớp B implement interface I, ta nói B hỗ trợ I, B "hiện thực hóa" những chức năng mà I yêu cầu.
Tất nhiên, giải thích ngắn gọn không phải lúc nào cũng dễ hiểu hơn giải thích đầy đủ :)